//For scanning ports usage: portscanner [port?] port argument is optional. Default 22
if params.len > 1 or (params and params[0] == "-h") or (params and params[0] == "--help") then exit("<b>Usage: " + program_path.split("/")[-1] + " [port?]</b>")
log = "PORT STATE SERVICE VERSION PUBLIC_IP LAN"
p = 22
if params then p = params[0].to_int
genip = function()
	while 1
		ip = [ceil(rnd * 255), ceil(rnd * 255) ,ceil(rnd * 255 ), ceil(rnd * 255)].join(".")
		if is_lan_ip(ip) then continue
        if not is_valid_ip(ip) then continue
        return ip
    end while
end function

portCheck = function(ipAddress)
	if not is_lan_ip(ipAddress) then router = get_router(ipAddress)
	if router == null then return null
	if not is_lan_ip(ipAddress) then ports = router.used_ports
	if(ports.len == 0) then return null
	for port in ports
		if port.port_number != p then continue
		service_info = router.port_info(port)
		lan_ips = port.get_lan_ip
		port_status = "open"
		if(port.is_closed and not is_lan_ip(ipAddress)) then
			port_status = "closed"
		end if
		return port.port_number + " " + port_status + " " + service_info + " " + ipAddress + " " + lan_ips
	end for
end function

check = function(ip)
	x = portCheck(ip)
	if not x then return log
	for line in log.split(char(10))
		if line.split(" ").len == 6 and ip == line.split(" ")[4] then return log
	end for
	return log + char(10) + x
end function

oldlog = log
while 1
	log = check(genip())
	if oldlog != log then
		print("Started scanning port " + p + "..." + char(10) + format_columns(log) + char(10) + "Press ctrl + C to stop port scanning...", true)
		oldlog = log
	end if
end while